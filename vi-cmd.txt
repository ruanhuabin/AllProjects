Vi使用与操作　　
　　在介绍如何使用vi之前，了解vi具有两种基本模式是很重要。这两种基本模式为输入模式和指令模式。输入模式为输入命令，文本就会显示在屏幕上；而指令模式为输入命令就执行命令，而不会显示文字。理解指令模式最简单方式就是想象平时剪切、复制以及粘贴数据时所发生的情况。　
　　在默认状态下，vi以指令模式下启动，因此你输入命令时不会显示文字，除非你输入命令切换至输入模式。大多数vi命令不会屏幕上显示任何东西，你只需要知道它们的工作过程就足够了。使用[Esc]键可以在输入模式和指令模式之间切换。如果你已经处于指令模式中，使用[Esc]将会告诉vi，你已经输入命令并将要执行命令。如果你没有输入任何命令，在指令模式中按下[Esc]键将中断操作。
　　现在我已经介绍了vi的基本操作，你可以动手试用一下。首先，在你的工作站打开一个终端窗口，你只需在$提示中输入vi然后按回车键就可以启动vi编辑器。　
　　接着，你将看到弹出一个页面左下角有一个~符号的空白文件。这一符号不容易看到，但是你看到的这些~符号正是表示处于文件的底部。当对文件保存之后，这些符号就不会显示出来。　　　　若要编辑某个文件或者为一空白文件命名，你可输入vi filename。vi filename可以是一个已经存在的文件名或者是一个给新文件指定的名称。　

　　通用输入模式　　
    　一旦进入编辑文档，除了使用[Esc]切换方法，还有其它很多方法使vi进入到输入模式。很多其它的方法都包含使用一个vi指令。这些指    令可以立即让vi进入输入模式，由此输入的字符立即以文字出现在文档中。常用的指令为：　　
          i 这是一个输入命令，即从光标所在位置前面开始插入文字，光标后的文字随新增文字向向移动。如果是一个空白文档，文字将会            输入在文档的左上角。
　        I 在行命令开始处的输入模式，即在当前行的开始处输入文字。与Word中的按下键后输入文字类似。　　
     　   a 这是一个新增命令，即从光标所在位置后面开始新增文字，光标后的资料随新增文字向后移动。　　
　        A 这是一个新增到行命令的操作，即从光标所在行最后面的地方开始新增文字。这与Word中的按下键后输入文字类似。　　
　        o 这是一个命令之下的打开行命令，即在光标所在行下面新增一行并进入输入模式。　　　
    　    O 这是一个命令之上的打开命令，即在光标所在行上方新增一行并进入输入模式。
　　编辑之后使用以上任一命令，将会返回到指令模式。　　　

　  光标移动指令  
    　接下来需要学习的是vi中的浏览命令。以指令模式在文档中移动，可以使用以下的命令：　
　    h：将一个文字移动到左边　　　
      j:往下移动一个文字　　　
　    k: 往上移动一个文字　　　
　    l: 将一个文字移动到右边　　　
　    在鼠标与GUI的环境中，这些移动命令看似有些过时，但是它们都被包含于所有vi版本就广泛应用。很多时候，光标号，上光标，下光标      ，左光标，右光标都会起到作用，但是操作者应该将termcap与terminfo属性包含在这些命令之中。　　　

　 以下的其它移动指令也可大有帮助：　　
　　  [Ctrl]f 　　　　向下移动一页指令。这将使得光标在文本中向下移动一页。　　
　　  [Ctrl]b 　　　　向后移动一页指令。这将使得光标在文本中向后移动一页。　　　
    　[Ctrl]u 　　　　向下移动半页指令。这将使得光标在文本中向下移动半页。　　　
    　^ 　　　　行命令开始处。光标将会移动到行的开始处。　　　
    　$ 　　　　行命令结束处。光标将会移动到行的结束处。　　　
    　w 　　　　移动到上一个文字的开始。　　
　　  b 　　　　移动到下一个文字的开始。　　
　　  e 　　　　文字末端指令。　　
　　  G 　　　　移动到文件的末端。　

　 常规功能　　
　　  在一般的文本编辑器中，所有的功能，比如删除，更改，剪切，复制，粘贴，以及搜索/替代等，都可以在vi中找到。很多指令都可以将   编辑状态进入输入模式，而又可以使用[Esc]来终止。常规使用的编辑指令包括: 　　
　　x：删除字符命令，即删除光标所在字符。　　
　　dw：删除文字命令，即删除光标处的文字。　　
　　dd：删除行命令，即删除光标所在的行。　　
　　D：删除到行末端，即删除从光标所在位置到行末端的所有文本。　　
　　cw：改变文字命令，即光标所有位置的文字将随着输入文字而改变，至到按下[Esc]。　　
　　r：替代字符命令，即光标所在位置的字符将被输入的字符替代，至到按下[Esc]。　　
　　R：替代多行字符命令，即光标所在位置到右边所有的字符将被输入的字符替代，至到按下[Esc]。　　　　
      绝大多数这些指令都可以通过组合而提高其功能。
      例如，如果你输入2dd，vi将删除两行文本。　　　

    　剪切与粘贴等操作　　　
    　与其它很多编辑器一样，你可以在文档中使用剪切与粘贴文本。以下命令是可以使用的最为简单的剪切与粘贴操作。　　
　　  yy 复制行命令。光标所有行的文本将被复制到类似剪切板的缓冲器。注意到可以使用多个复制命令更改这一命令以将多行文字剪切到缓         冲器。　　
　　  yl 复制字符命令。光标所有行的字符将被复制到类似剪切板的缓冲器。可以使用多个复制命令更改这一命令以将多行字符剪切到缓冲器
　　  p 后放置命令。在当前光标位置之后放置或粘贴缓冲器的内容。对于复制行命令，缓冲器的内容将被粘贴在当前行之后。对于复制字符        行命令，缓冲器内容将被粘贴在光标的右边。　　
　　  P 前放置命令。在当前光标位置之前放置或粘贴缓冲器的内容。对于复制行命令，缓冲器的内容将被粘贴在当前行之前。对于复制字符        行命令，缓冲器内容将被粘贴在光标的左边。　　
　　    使用复制和放置指令时，你也可以字符指令而使用多个缓冲器或剪切板。这些字符可为a-z，并且只能是小写字母。例如，ayy将当前        行内容复制到缓冲器A，ap命令将缓冲器的内容粘贴在当前行之前。　

　　Vi中最为重要的命令要算undo指令。这一命令十分简单：只需要按下u。按下u键就可以撤消最近使用的一次指令。　　　　
      与undo命令类似的是redo命令。按下句号键(.)将会重新键入最近的指令。例如，如果你使用cw来改变一个文字，你可以查找这一文字然    后使用句号.来这   一文字。　　
　　  其它两个重要的命令为search命令。为了在文档中向前查找，可键入/text，text即为你查找的内容。重要的是一定注意，只有输入内容    完全的匹配，你才可以查找到。Vi不支持混合查询或者模糊查询。对于向后查找，可键入?text，text即为查找的内容。
　　
　　编辑指令　　
　　  在指令模式中，很多组命令都可以前缀:。与以上提及的命令不一样，一旦输入一个冒号，所有指令都出现在屏幕的左下角，并可以在执     行之前编辑。以下是常用的重要的:指令。　　　　    ：w 　　　　编写文件命令。如果你输入:w然后回车，当前文件将被写入硬盘。如    果使用的是一个空白文档，将会出现“没有当前的文件名”的消息。可以使用:w文件名将一个空白文档或当前文档写入到另一文件。　　
　　:w!或:w文件名覆盖文件命令。如果输入:w!然后回车，文件将会被当前新输入的名称而覆盖。这可用于文件的覆盖。　　
　　:q 　　　　退出命令。如果正常保持，输入：q将会终止整个操作。　　
　　:q! 　　　　退出而不需要保持命令。在不需要保存文件的情况下退出。　　
　　:%s/find_text/replace_text/ 　　

　　查询与替代命令　　
　　正如上面提及一样，可以改变查询命令为一个查询与替代命令。使用:%s命令可以告诉vi查询文档中所有行。/find_text命令与以上的查询命令类似，当其后缀/replace_text/,时，/find_text操作结果的第一行将会被替代。为了将/find_text所有内容被替代，可以增加一个g(全局)，比如:%s/find_text/replace_text/g。　　
　　你不要只使用单一的指令。你可以将多个指令结合使用。例如，:wq!将会保存文件到硬盘并退出vi而返回到指令状态。　　　　Vi=包含全部(Very involved) 　　　　以上提及的内容只是vi功能的一小部分。你可以一起执行指令串，以标记方式复制而粘贴文本，或者使用sed指令。你还可以将shell script的输出或其它指令插入到你的文档中。　　　　以上涉及到的例子和指令将可以带你进入vi的大门。很多vi使用者在操作时都会记住一些命令。从其它使用vi的人可以学会更多的vi指令，而此时你或许惊叹vi的强大。然而，你应该记住一点：经常地使用:a指令，因为vi没有提供自动后台文档保存功能。                                      

文本编辑器是所有计算机系统中最常用的一种工具。UNIX下的编辑器有ex,sed和vi等，其中，使用最为广泛的是vi，而vi命令繁多，论坛里好像这方面的总结不多，以下稍做总结，以资共享！渴望更正和补充！ 

进入vi的命令
vi filename :打开或新建文件，并将光标置于第一行首
vi +n filename ：打开文件，并将光标置于第n行首
vi + filename ：打开文件，并将光标置于最后一行首
vi +/pattern filename：打开文件，并将光标置于第一个与pattern匹配的串处
vi -r filename ：在上次正用vi编辑时发生系统崩溃，恢复filename
vi filename....filename ：打开多个文件，依次进行编辑

移动光标类命令
h ：光标左移一个字符
l ：光标右移一个字符
space：光标右移一个字符
Backspace：光标左移一个字符
k或Ctrl+p：光标上移一行
j或Ctrl+n ：光标下移一行
Enter ：光标下移一行
w或W ：光标右移一个字至字首
b或B ：光标左移一个字至字首
e或E ：光标右移一个字至字尾
) ：光标移至句尾
( ：光标移至句首
}：光标移至段落开头
{：光标移至段落结尾
nG：光标移至第n行首
n+：光标下移n行
n-：光标上移n行
n$：光标移至第n行尾
H ：光标移至屏幕顶行
M ：光标移至屏幕中间行
L ：光标移至屏幕最后行
0：（注意是数字零）光标移至当前行首
$：光标移至当前行尾

屏幕翻滚类命令
Ctrl+u：向文件首翻半屏
Ctrl+d：向文件尾翻半屏
Ctrl+f：向文件尾翻一屏
Ctrl＋b；向文件首翻一屏
nz：将第n行滚至屏幕顶部，不指定n时将当前行滚至屏幕顶部。

插入文本类命令
i ：在光标前
I ：在当前行首
a：光标后
A：在当前行尾
o：在当前行之下新开一行
O：在当前行之上新开一行
r：替换当前字符
R：替换当前字符及其后的字符，直至按ESC键
s：从当前光标位置处开始，以输入的文本替代指定数目的字符
S：删除指定数目的行，并以所输入文本代替之
ncw或nCW：修改指定数目的字
nCC：修改指定数目的行

删除命令
ndw或ndW：删除光标处开始及其后的n-1个字
do：删至行首
d$：删至行尾
ndd：删除当前行及其后n-1行
x或X：删除一个字符，x删除光标后的，而X删除光标前的
Ctrl+u：删除输入方式下所输入的文本

搜索及替换命令
/pattern：从光标开始处向文件尾搜索pattern
?pattern：从光标开始处向文件首搜索pattern
n：在同一方向重复上一次搜索命令
N：在反方向上重复上一次搜索命令
：s/p1/p2/g：将当前行中所有p1均用p2替代
：n1,n2s/p1/p2/g：将第n1至n2行中所有p1均用p2替代
：g/p1/s//p2/g：将文件中所有p1均用p2替换

选项设置
all：列出所有选项设置情况
term：设置终端类型
ignorance：在搜索中忽略大小写
list：显示制表位(Ctrl+I)和行尾标志（$)
number：显示行号
report：显示由面向行的命令修改过的数目
terse：显示简短的警告信息
warn：在转到别的文件时若没保存当前文件则显示NO write信息
nomagic：允许在搜索模式中，使用前面不带“\”的特殊字符
nowrapscan：禁止vi在搜索到达文件两端时，又从另一端开始
mesg：允许vi显示其他用户用write写到自己终端上的信息

最后行方式命令
：n1,n2 co n3：将n1行到n2行之间的内容拷贝到第n3行下
：n1,n2 m n3：将n1行到n2行之间的内容移至到第n3行下
：n1,n2 d ：将n1行到n2行之间的内容删除
：w ：保存当前文件
：e filename：打开文件filename进行编辑
：x：保存当前文件并退出
：q：退出vi
：q!：不保存文件并退出vi
：!command：执行shell命令command
：n1,n2 w!command：将文件中n1行至n2行的内容作为command的输入并执行之，若不指定n1，n2，则表示将整个文件内容作为command的输入
：r!command：将命令command的输出结果放到当前行

寄存器操作
"?nyy：将当前行及其下n行的内容保存到寄存器？中，其中?为一个字母，n为一个数字
"?nyw：将当前行及其下n个字保存到寄存器？中，其中?为一个字母，n为一个数字
"?nyl：将当前行及其下n个字符保存到寄存器？中，其中?为一个字母，n为一个数字
"?p：取出寄存器？中的内容并将其放到光标位置处。这里？可以是一个字母，也可以是一个数字
ndd：将当前行及其下共n行文本删除，并将所删内容放到1号删除寄存器中。
 
 
